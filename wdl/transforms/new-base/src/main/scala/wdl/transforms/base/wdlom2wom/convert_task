object WFL_temp {
def convert(b: TaskDefinitionElementToWomInputs)
             (implicit expressionValueConsumer: ExpressionValueConsumer[ExpressionElement],
              fileEvaluator: FileEvaluator[ExpressionElement],
              typeEvaluator: TypeEvaluator[ExpressionElement],
              valueEvaluator: ValueEvaluator[ExpressionElement]): ErrorOr[CallableTaskDefinition] = {
    val a = eliminateInputDependencies(b)
    val inputElements = a.taskDefinitionElement.inputsSection.map(_.inputDeclarations).getOrElse(Seq.empty)

    val declarations = a.taskDefinitionElement.declarations
    val outputElements = a.taskDefinitionElement.outputsSection.map(_.outputs).getOrElse(Seq.empty)

    val conversion = (
      createTaskGraph(inputElements, declarations, outputElements, a.taskDefinitionElement.parameterMetaSection, a.typeAliases),
      validateParameterMetaEntries(a.taskDefinitionElement.parameterMetaSection, a.taskDefinitionElement.inputsSection, a.taskDefinitionElement.outputsSection)
    ) flatMapN { (taskGraph, _) =>
      val validRuntimeAttributes: ErrorOr[RuntimeAttributes] = a.taskDefinitionElement.runtimeSection match {
        case Some(attributeSection) => createRuntimeAttributes(attributeSection, taskGraph.linkedGraph)
        case None => RuntimeAttributes(Map.empty).validNel
      }

      val validCommand: ErrorOr[Seq[CommandPart]] = {
        expandLines(a.taskDefinitionElement.commandSection.parts).toList.traverse { parts =>
          CommandPartElementToWomCommandPart.convert(parts, taskGraph.linkedGraph.typeAliases, taskGraph.linkedGraph.generatedHandles)
        }.map(_.toSeq)
      }

      val (meta, parameterMeta) = processMetaSections(a.taskDefinitionElement.metaSection, a.taskDefinitionElement.parameterMetaSection)

      (validRuntimeAttributes, validCommand) mapN { (runtime, command) =>
        CallableTaskDefinition(a.taskDefinitionElement.name, Function.const(command.validNel), runtime, meta, parameterMeta, taskGraph.outputs, taskGraph.inputs, Set.empty, Map.empty, sourceLocation = a.taskDefinitionElement.sourceLocation)
      }
    }

    conversion.contextualizeErrors(s"process task definition '${b.taskDefinitionElement.name}'")
  }
}
